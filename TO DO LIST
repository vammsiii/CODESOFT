from tkinter import *
from tkinter import messagebox
import sqlite3 as sql

class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List")
        self.root.geometry("665x400+550+250")
        self.root.resizable(0, 0)
        self.root.configure(bg="#B5E5CF")

        self.conn = sql.connect('listOfTasks.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('CREATE TABLE IF NOT EXISTS tasks (title TEXT)')

        self.tasks = []

        self.setup_ui()
        self.retrieve_database()
        self.list_update()

    def setup_ui(self):
        self.functions_frame = Frame(self.root, bg="#8EE5EE")
        self.functions_frame.pack(side="top", expand=True, fill="both")

        self.task_label = Label(self.functions_frame, text="TO-DO-LIST \n Enter the Task Title:",
                                font=("arial", "14", "bold"),
                                background="#8EE5EE",
                                foreground="#FF6103")
        self.task_label.place(x=20, y=30)

        self.task_field = Entry(self.functions_frame, font=("Arial", "14"), width=42, foreground="black",
                                background="white")
        self.task_field.place(x=180, y=30)

        self.add_button = Button(self.functions_frame, text="Add", width=15, bg='#D4AC0D', font=("arial", "14", "bold"),
                                 command=self.add_task)
        self.del_button = Button(self.functions_frame, text="Remove", width=15, bg='#D4AC0D',
                                 font=("arial", "14", "bold"), command=self.delete_task)
        self.del_all_button = Button(self.functions_frame, text="Delete All", width=15, font=("arial", "14", "bold"),
                                     bg='#D4AC0D', command=self.delete_all_tasks)
        self.exit_button = Button(self.functions_frame, text="Exit / Close", width=52, bg='#D4AC0D',
                                  font=("arial", "14", "bold"), command=self.close)

        self.add_button.place(x=18, y=80)
        self.del_button.place(x=240, y=80)
        self.del_all_button.place(x=460, y=80)
        self.exit_button.place(x=17, y=330)

        self.task_listbox = Listbox(self.functions_frame, width=70, height=9, font="bold", selectmode='SINGLE',
                                    background="WHITE", foreground="BLACK", selectbackground="#FF8C00",
                                    selectforeground="BLACK")
        self.task_listbox.place(x=17, y=140)

    def add_task(self):
        task_string = self.task_field.get()
        if len(task_string) == 0:
            messagebox.showinfo('Error', 'Field is Empty.')
        else:
            self.tasks.append(task_string)
            try:
                self.cursor.execute('INSERT INTO tasks (title) VALUES (?)', (task_string,))
                self.conn.commit()
            except sql.Error as e:
                messagebox.showerror('Database Error', str(e))
            self.list_update()
            self.task_field.delete(0, 'end')

    def list_update(self):
        self.clear_list()
        for task in self.tasks:
            self.task_listbox.insert('end', task)

    def delete_task(self):
        try:
            the_value = self.task_listbox.get(self.task_listbox.curselection())
            if the_value in self.tasks:
                self.tasks.remove(the_value)
                self.list_update()
                self.cursor.execute('DELETE FROM tasks WHERE title = ?', (the_value,))
                self.conn.commit()
        except:
            messagebox.showinfo('Error', 'No Task Selected. Cannot Delete.')

    def delete_all_tasks(self):
        message_box = messagebox.askyesno('Delete All', 'Are you sure?')
        if message_box:
            self.tasks.clear()
            self.cursor.execute('DELETE FROM tasks')
            self.conn.commit()
            self.list_update()

    def clear_list(self):
        self.task_listbox.delete(0, 'end')

    def close(self):
        self.conn.commit()
        self.conn.close()
        self.root.destroy()

    def retrieve_database(self):
        self.tasks.clear()
        for row in self.cursor.execute('SELECT title FROM tasks'):
            self.tasks.append(row[0])

if __name__ == "__main__":
    root = Tk()
    app = ToDoApp(root)
    root.mainloop()
